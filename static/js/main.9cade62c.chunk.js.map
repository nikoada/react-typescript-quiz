{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/silvio-kundt-pOZGBVICxDc-unsplash.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","TotalAmount","Caterogies","fetchQuizQuestions","category","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnser","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","totalAmount","FIVE","EASY","categories","BOOKS","options","setOptions","console","log","startTrivia","newQuetions","length","name","onChange","event","prev","target","Object","keys","item","index","isNaN","Number","undefined","e","currentTarget","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cade62c.chunk.js","sourcesContent":["\nimport { shuffleArray } from \"./utils\";\n\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] }\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport enum TotalAmount {\n    FIVE = 5,\n    TEN = 10,\n    TWENTY = 20,\n}\n\nexport enum Caterogies {\n    BOOKS = 10,\n    FILM = 11,\n    MUSIC = 12,\n    MUSICALS_AND_THEATRES = 13,\n    TELEVISION = 14,\n    VIDEO_GAMES = 15,\n    BOARD_GAMES = 16,\n    NATURE = 17,\n    COMPUTERS = 18,\n    MATHEMATICS = 19,\n    MYTHOLOGY = 20,\n    SPORTS = 21,\n    GEOGRAPHY = 22,\n    HISTORY = 23,\n    POLITICS = 24,\n    ART = 25,\n    ANIMALS = 27,\n    VEHICLES = 28,\n    COMICS = 29,\n    GADGETS = 30,\n    ANIME_MANGA = 31,\n    CARTOON_ANIMATIONS = 32,\n}\n\nexport const fetchQuizQuestions = async (category: Caterogies, amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer,]),\n    }));\n};","\n\nexport const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0 5px 10px rgba(0, 0, 0, .25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) => \n            correct\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n                : !correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\n    }\n`","import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnser: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnser, questionNr, totalQuestions }) => (\n    <Wrapper>\n        <p className=\"number\">\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }} />\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper\n                    key={answer}\n                    correct={userAnser?.correctAnswer === answer}\n                    userClicked={userAnser?.answer === answer}\n                >\n                    <button disabled={!!userAnser} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer}} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/silvio-kundt-pOZGBVICxDc-unsplash.ef3f1aac.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from './images/silvio-kundt-pOZGBVICxDc-unsplash.jpg'\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color:#fff;\n    }\n\n    .score {\n        color: #000;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: Fascinate Inline, Haettenschweiler, 'Aerial Narrow Bold', sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport { QuestionState, Difficulty, TotalAmount, Caterogies } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst App = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [options, setOptions] = useState({\n    totalAmount: TotalAmount.FIVE,\n    difficulty: Difficulty.EASY,\n    categories: Caterogies.BOOKS,\n  })\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuetions = await fetchQuizQuestions(\n      options.categories,\n      options.totalAmount,\n      options.difficulty,\n    );\n\n    setQuestions(newQuetions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n      // Check answer  against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === options.totalAmount) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === options.totalAmount ? (\n          <>\n        <label>Select Category: </label>\n        <select name=\"caterogies\" onChange={(event) => setOptions(prev => { return { ...prev, categories: Caterogies[event.target.value as keyof typeof Caterogies] } })}>\n          {Object.keys(Caterogies).map((item, index) => {\n            return isNaN(Number(item)) && <option value={item} key={index}>{item}</option>\n          })}\n        </select>\n        <label>Difficulty:</label>\n        <select name=\"difficulty\" onChange={(event) => setOptions(prev => { return { ...prev, difficulty: Difficulty[event.target.value as keyof typeof Difficulty] } })}>\n          {Object.keys(Difficulty).map((item, index) => <option value={item} key={index}>{item}</option>)}\n        </select>\n        <label>Amount of questions:</label>\n        <select name=\"amount\" onChange={(event) => setOptions(prev => { return { ...prev, totalAmount: TotalAmount[event.target.value as keyof typeof TotalAmount] } })}>\n          {Object.keys(TotalAmount).map((item, index) => {\n            return isNaN(Number(item)) && <option value={item} key={index}>{item}</option>\n          })}\n        </select>\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n          </>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions ...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={options.totalAmount}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnser={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== options.totalAmount - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}